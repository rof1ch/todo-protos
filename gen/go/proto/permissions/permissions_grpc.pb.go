// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: proto/permissions/permissions.proto

package permissionsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Permissions_AssignPrivilages_FullMethodName = "/permissions.Permissions/AssignPrivilages"
	Permissions_HasPrivilage_FullMethodName     = "/permissions.Permissions/HasPrivilage"
	Permissions_GetPrivilages_FullMethodName    = "/permissions.Permissions/GetPrivilages"
)

// PermissionsClient is the client API for Permissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsClient interface {
	AssignPrivilages(ctx context.Context, in *AssignPrivilagesRequest, opts ...grpc.CallOption) (*AssignPrivilagesResponse, error)
	HasPrivilage(ctx context.Context, in *HasPrivilageRequest, opts ...grpc.CallOption) (*HasPrivilageResponse, error)
	GetPrivilages(ctx context.Context, in *GetPrivilagesRequest, opts ...grpc.CallOption) (*GetPrivilagesResponse, error)
}

type permissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsClient(cc grpc.ClientConnInterface) PermissionsClient {
	return &permissionsClient{cc}
}

func (c *permissionsClient) AssignPrivilages(ctx context.Context, in *AssignPrivilagesRequest, opts ...grpc.CallOption) (*AssignPrivilagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPrivilagesResponse)
	err := c.cc.Invoke(ctx, Permissions_AssignPrivilages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) HasPrivilage(ctx context.Context, in *HasPrivilageRequest, opts ...grpc.CallOption) (*HasPrivilageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasPrivilageResponse)
	err := c.cc.Invoke(ctx, Permissions_HasPrivilage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) GetPrivilages(ctx context.Context, in *GetPrivilagesRequest, opts ...grpc.CallOption) (*GetPrivilagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivilagesResponse)
	err := c.cc.Invoke(ctx, Permissions_GetPrivilages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsServer is the server API for Permissions service.
// All implementations must embed UnimplementedPermissionsServer
// for forward compatibility.
type PermissionsServer interface {
	AssignPrivilages(context.Context, *AssignPrivilagesRequest) (*AssignPrivilagesResponse, error)
	HasPrivilage(context.Context, *HasPrivilageRequest) (*HasPrivilageResponse, error)
	GetPrivilages(context.Context, *GetPrivilagesRequest) (*GetPrivilagesResponse, error)
	mustEmbedUnimplementedPermissionsServer()
}

// UnimplementedPermissionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionsServer struct{}

func (UnimplementedPermissionsServer) AssignPrivilages(context.Context, *AssignPrivilagesRequest) (*AssignPrivilagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPrivilages not implemented")
}
func (UnimplementedPermissionsServer) HasPrivilage(context.Context, *HasPrivilageRequest) (*HasPrivilageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPrivilage not implemented")
}
func (UnimplementedPermissionsServer) GetPrivilages(context.Context, *GetPrivilagesRequest) (*GetPrivilagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilages not implemented")
}
func (UnimplementedPermissionsServer) mustEmbedUnimplementedPermissionsServer() {}
func (UnimplementedPermissionsServer) testEmbeddedByValue()                     {}

// UnsafePermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsServer will
// result in compilation errors.
type UnsafePermissionsServer interface {
	mustEmbedUnimplementedPermissionsServer()
}

func RegisterPermissionsServer(s grpc.ServiceRegistrar, srv PermissionsServer) {
	// If the following call pancis, it indicates UnimplementedPermissionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Permissions_ServiceDesc, srv)
}

func _Permissions_AssignPrivilages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPrivilagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).AssignPrivilages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_AssignPrivilages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).AssignPrivilages(ctx, req.(*AssignPrivilagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_HasPrivilage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPrivilageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).HasPrivilage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_HasPrivilage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).HasPrivilage(ctx, req.(*HasPrivilageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_GetPrivilages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivilagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).GetPrivilages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_GetPrivilages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).GetPrivilages(ctx, req.(*GetPrivilagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Permissions_ServiceDesc is the grpc.ServiceDesc for Permissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permissions.Permissions",
	HandlerType: (*PermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignPrivilages",
			Handler:    _Permissions_AssignPrivilages_Handler,
		},
		{
			MethodName: "HasPrivilage",
			Handler:    _Permissions_HasPrivilage_Handler,
		},
		{
			MethodName: "GetPrivilages",
			Handler:    _Permissions_GetPrivilages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/permissions/permissions.proto",
}
